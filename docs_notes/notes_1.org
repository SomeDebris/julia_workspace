#+TITLE: Julia documentation notes
#+startup: indent

* Introduction:
- Julia is a high-performance language (approaching C) that tries to look like a
  "slow dynamic language" (python).
- Read through "Performance tips" if your thing is slow. Julia's speed is a little
  different than things you're probably used to. It can become as fast as C!
- Julia uses some unique tech (e.g. JIT, uses LLVM), has pretty equations like
  matlab, python, and R, but is more general. Tries to combine dynamic languages
  with maths.
- Uniquely, in Julia, types are inferred but can also be declared.
- The core feature of Julia is that functions are defined by the differing types
  of their arguments. The "best choice" function is the one that's actually run
  when the function is called. Thats "Multiple Dispatch" for ya. Differs from
  "Object Oriented Dispatch", as the type of arguments used in an operation
  can change how it behaves.
- Julia was designed to be performant, even though it's dynamic. This is unusual
  and is why you may want to use this language.

* Getting Started
- You should read the MATLAB Differences section.
- use `include("file.jl")` to eval expressions in the file file.jl
- check out the Learning page of the julia website

* Variables
- names begin with letter OR unicode greater than 00A0.
- operators are used like variables:
  - `(+)` -> Addition Function
- See this section for an in depth description of unicode stuff.
- cannot use built-in keywords in var names.
  
** Style conventions
- Var names lowercase
- seperate_words_with_underscore. but try to not use them!
- Types and Modules begin with Capital letter. UpperCamelCase.
- functions and macros are lowercase, withoutunderscores.
- functions that WRITE TO THEIR ARGUMENTS end in !. can be called
  "mutating" or "in-place" functions.
